<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://UeterSad.github.io</id>
    <title>ueter</title>
    <updated>2023-09-17T07:24:40.444Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://UeterSad.github.io"/>
    <link rel="self" href="https://UeterSad.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://UeterSad.github.io/images/avatar.png</logo>
    <icon>https://UeterSad.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, ueter</rights>
    <entry>
        <title type="html"><![CDATA[HDU 4252 A Famous City]]></title>
        <id>https://UeterSad.github.io/post/hdu-4252-a-famous-city/</id>
        <link href="https://UeterSad.github.io/post/hdu-4252-a-famous-city/">
        </link>
        <updated>2023-09-17T06:55:20.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h3 id="题目"><strong>题目</strong></h3>
<p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=4252">A Famous City</a></p>
<!-- more -->
<h3 id="题目大意"><strong>题目大意</strong></h3>
<blockquote>
<p>一张相片上的很多建筑相互遮住了,根据高低不同就在相片上把一座高楼的可见部分作为一个矩形,<br>
并用数字描述其高度,若一张相片上的两个建筑群中间有空地,高度则为0;求最少有多少个建筑;</p>
</blockquote>
<h3 id="思路"><strong>思路</strong></h3>
<blockquote>
<p>把每一竖行当作一座建筑然后再排除：高度为0排除，形成矩形排除。<br>
从左往右开始数，若中间没有间隔，一旦出现高度一样的就排除掉</p>
</blockquote>
<h3 id="代码"><strong>代码</strong></h3>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
const int N=1e5+9;
int a[N];
void solve()
{
	int n;int j=0;
	while(cin&gt;&gt;n)
	{
		 j++;int ans=n;
		 for(int i=1;i&lt;=n;++i)cin&gt;&gt;a[i];
		 for(int i=1;i&lt;=n;++i)
		 {
		 	if(a[i]==0)ans--;
		 	else{
		 		for(int k=i+1;k&lt;=n;k++)
		 		{
		 			if(a[i]&gt;a[k])break;
		 			if(a[i]==a[k])
		 			{
		 				ans--;
		 				break;
		 			}
		 		}
		 	}
		 }
		 
		cout&lt;&lt;&quot;Case &quot;&lt;&lt;j&lt;&lt;&quot;: &quot;&lt;&lt;ans&lt;&lt;'\n';
	}
}
int main()
{
	int t=1;
	while(t--)solve();
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CodeForces 914B]]></title>
        <id>https://UeterSad.github.io/post/codeforces-914b/</id>
        <link href="https://UeterSad.github.io/post/codeforces-914b/">
        </link>
        <updated>2023-07-31T07:23:25.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h3 id="题目"><strong>题目</strong></h3>
<p><a href="https://vjudge.net/problem/CodeForces-914B">CodeForces914B</a></p>
<h3 id="题目大意"><strong>题目大意</strong></h3>
<blockquote>
<p>两个人玩游戏<br>
每次选一张牌拿走，同时拿走小于这张牌的所有牌<br>
拿走最后一张牌的获胜<br>
每个人采取最优方案，输出获胜的人</p>
</blockquote>
<h3 id="解题思路及分析"><strong>解题思路及分析</strong></h3>
<blockquote>
<p>博弈论</p>
</blockquote>
<blockquote>
<p>递归的去思考这个问题<br>
先是最简单的情况</p>
<ol>
<li><code>样例</code>最大牌有1个 ---&gt; 先手必赢 （直接拿走最大牌）</li>
<li><code>样例</code>只有一种牌 且有偶数个 ---&gt; 后手必赢</li>
<li>最大牌有奇数个，先手拿走一张最大牌，后手变成情况2的先手 ---&gt; 先手必赢</li>
<li>最大牌有偶数个，拿完其他牌变成情况2，故考虑次大牌<br>
而次大牌重复上述讨论的情况，故把小于最大牌的情况统一考虑</li>
<li>所有牌都有偶数个，递归可得到情况2 ---&gt; 后手必赢</li>
<li>最大牌有偶数个，其余牌只有一种有奇数个，先手拿走奇数牌的一张得到情况5 ---&gt; 先手必赢</li>
<li>最大牌有偶数个，其余牌有多种有奇数个，先手拿走奇数牌中最大牌的一张，得到情况5---&gt; 先手必赢</li>
</ol>
</blockquote>
<blockquote>
<p>综上考虑，存在奇数个数的牌即先手赢，都是偶数个则后手赢<br>
只需统计每种牌的个数</p>
</blockquote>
<h3 id="代码"><strong>代码</strong></h3>
<pre><code class="language-c++">#include&lt;bits/stdc++.h&gt;
using namespace std;
const int N=1e5;
int a[N];
int main()
{
	int n;cin&gt;&gt;n;int max=0;int win=0;
	while(n--)
	{
		int x;cin&gt;&gt;x;
		a[x]++;
		if(x&gt;max)max=x;
	}
	for(int i=0;i&lt;=max;i++)
	{
		if(a[i]&amp;1){cout&lt;&lt;&quot;Conan&quot;&lt;&lt;'\n';win=1;break;}
	}
	if(!win)cout&lt;&lt;&quot;Agasa&quot;&lt;&lt;'\n';
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HDU 1004 Let the Balloon Rise]]></title>
        <id>https://UeterSad.github.io/post/hdu-1004-let-the-balloon-rise/</id>
        <link href="https://UeterSad.github.io/post/hdu-1004-let-the-balloon-rise/">
        </link>
        <updated>2023-07-31T07:12:10.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h3 id="题目"><strong>题目</strong></h3>
<p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=1004">Let the Balloon Rise</a></p>
<!-- more -->
<h3 id="题目大意"><strong>题目大意</strong></h3>
<blockquote>
<p>题目的大概意思是给你N个颜色不同的气球让你从中找到出现次数最多的那种颜色，输出出现次数最多的那种颜色。</p>
</blockquote>
<h3 id="代码"><strong>代码</strong></h3>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;map&gt;
using namespace std;
int main()
{
    int n;

    while(cin&gt;&gt;n&amp;&amp;n)
    {
        map&lt;string,int&gt; m;//默认second为0
        string s;
        string maxx;
        int maxn=-1;
        for(int i=0; i&lt;n; i++)
        {
            cin&gt;&gt;s;
            m[s]++;
        }
        for(map&lt;string,int&gt;::iterator it=m.begin();it!=m.end();it++)
           {

            if((*it).second&gt;maxn)
            {
                maxn=(*it).second;
                maxx=(*it).first;
            }
        }
        cout&lt;&lt;maxx&lt;&lt;endl;
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HDU 1020 Eecoding]]></title>
        <id>https://UeterSad.github.io/post/hdu-1020-eecoding/</id>
        <link href="https://UeterSad.github.io/post/hdu-1020-eecoding/">
        </link>
        <updated>2023-07-31T06:59:20.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="hdu-encoding">HDU Encoding</h2>
<!-- more -->
<h3 id="题目大意"><strong>题目大意</strong></h3>
<blockquote>
<p>将输入的大写字母字符串转换格式输出，在大写字母前输出该字母的个数，如果个数为1，则可忽略</p>
</blockquote>
<h3 id="代码"><strong>代码</strong></h3>
<pre><code class="language-c++">#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;

char s[10005];
int main()
{
	int t;
	cin&gt;&gt;t;
	while(t--)
	{
		cin&gt;&gt;s;
		int len=strlen(s);
		int cnt=1;
		for(int i=0;i&lt;len;i++)
		{
			if(s[i]==s[i+1])
				cnt++;
			else
			{
				if(cnt==1)
					cout&lt;&lt;s[i];
				else
					cout&lt;&lt;cnt&lt;&lt;s[i];
				cnt=1;
			}
		}
		cout&lt;&lt;endl;
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HDU 1003 Max Sum]]></title>
        <id>https://UeterSad.github.io/post/hdu-1003-max-sum/</id>
        <link href="https://UeterSad.github.io/post/hdu-1003-max-sum/">
        </link>
        <updated>2023-07-30T15:58:12.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="hdu-1003-max-sum">HDU 1003 Max Sum</h2>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1003/">HDU 1003 Max Sum</a></p>
<h3 id="题目大意">题目大意</h3>
<blockquote>
<p>给出一段数列，你需要计算出它的最大子串和，并输出结果和子串的起始位置及结束位置</p>
</blockquote>
<h3 id="解题思路及其分析">解题思路及其分析</h3>
<blockquote>
<p>说实话，最开始我其实是没啥思路的，刚学完前缀和看到标题脑子一热就冲上去写，写了几次都不对才发觉事情不妙，网上搜了一下，发现都说是经典动态规划问题，没怎么接触，但隐隐感觉有点眼熟，突然想起这是数据结构课上的入门问题（陈越老师用了4种解法），然后开始写，求和轻松拿下，但找出位置这个却让我犯了难，因为入门的时候她没讲原理，所以直接卡住，最后跟着别人照猫画虎写的。</p>
</blockquote>
<blockquote>
<p>说一下我的大致理解：在循环的过程中，每循环一次就算出一个以当前位置结束的最大子序列和。每次循环中最大的那个保存下来，不就是最终所有最大子序列和中的最大值了么。<br>
其中temp保存的是前一个位置的最大子序列和的开始位置（题目中是从1开始的哦）；当 now &gt; max 时就记录最大值，并保持它的开始位置为temp，终止位置即为当前位置。<br>
当最大子序列和小于0时，将 temp = i , 其中 i  表示当前位置,now=a[i]，表示加入当前位置的值。既此最大子序列和为负值，那么下一个的最大子序列和应该是它本身，而不再累加前边的。</p>
</blockquote>
<h3 id="代码">代码</h3>
<pre><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
const int N=1e5+9;
int a[N];
int main()
{
	int t;cin&gt;&gt;t;
	for(int j=1;j&lt;=t;++j)
	{
	int n;cin&gt;&gt;n;
	for(int i=1;i&lt;=n;++i)cin&gt;&gt;a[i];
	int now=0,max=-1001;
	int l=1,r=1,temp=1;
	for(int i=1;i&lt;=n;++i)
	{
		if(now&gt;=0)
		now+=a[i];
		else now=a[i],temp=i;
		if(now&gt;max)r=i,l=temp,max=now;
	}
	cout&lt;&lt;&quot;Case &quot;&lt;&lt;j&lt;&lt;&quot;:&quot;&lt;&lt;'\n';
	cout&lt;&lt;max&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;'\n';
	if (j!=t)cout&lt;&lt;'\n';  
	}
	return 0;
	
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://UeterSad.github.io/post/hello-gridea/</id>
        <link href="https://UeterSad.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>